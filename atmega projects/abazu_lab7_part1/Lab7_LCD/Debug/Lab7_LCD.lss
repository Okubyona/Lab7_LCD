
Lab7_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800112  00800112  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d91  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a1  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  000022c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051f  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000436  00000000  00000000  00002927  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	60 d1       	rcall	.+704    	; 0x384 <main>
  c4:	77 c1       	rjmp	.+750    	; 0x3b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
	for(j=0;j<775;j++)
	{
		asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
	}
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
  ee:	5e 98       	cbi	0x0b, 6	; 11
	DATA_BUS = Command;
  f0:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
  f4:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
  f6:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
}

void LCD_init(void) {

	//wait for 100 ms.
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
	delay_ms(10);
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 136:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 138:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 13a:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 13c:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 168:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
void TimerOff() {
    TCCR1B = 0x00;
}

void TimerISR() {
    TimerFlag = 1;
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr>
 1ac:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
    // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
    _avr_timer_cntcurr--;   // Count down to 0 rather than up to TOP
 1d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_avr_timer_cntcurr>
 1d6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr>
 1ec:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <_avr_timer_cntcurr+0x3>
    if (_avr_timer_cntcurr == 0) {
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
void TimerOff() {
    TCCR1B = 0x00;
}

void TimerISR() {
    TimerFlag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
    // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
    _avr_timer_cntcurr--;   // Count down to 0 rather than up to TOP
    if (_avr_timer_cntcurr == 0) {
        TimerISR();
        _avr_timer_cntcurr = _avr_timer_M;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 216:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr>
 21a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <_avr_timer_cntcurr+0x2>
 222:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <_avr_timer_cntcurr+0x3>
    }

}
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:

void TimerSet(unsigned long M) {
    _avr_timer_M = M;
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    _avr_timer_cntcurr = _avr_timer_M;
 248:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <_avr_timer_cntcurr>
 24c:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <_avr_timer_cntcurr+0x1>
 250:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_avr_timer_cntcurr+0x2>
 254:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_avr_timer_cntcurr+0x3>
 258:	08 95       	ret

0000025a <Tick>:
}

int Tick(int state) {
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
    static unsigned char count;
    static unsigned char timeCntr;

    unsigned char A0 = ~PINA & 0x01;
 260:	80 b1       	in	r24, 0x00	; 0
 262:	98 2f       	mov	r25, r24
 264:	91 70       	andi	r25, 0x01	; 1
    unsigned char A1 = ~PINA & 0x02;
 266:	80 b1       	in	r24, 0x00	; 0
 268:	80 95       	com	r24
 26a:	82 70       	andi	r24, 0x02	; 2

    switch (state) {
 26c:	c2 30       	cpi	r28, 0x02	; 2
 26e:	d1 05       	cpc	r29, r1
 270:	c9 f0       	breq	.+50     	; 0x2a4 <Tick+0x4a>
 272:	34 f4       	brge	.+12     	; 0x280 <Tick+0x26>
 274:	20 97       	sbiw	r28, 0x00	; 0
 276:	09 f4       	brne	.+2      	; 0x27a <Tick+0x20>
 278:	43 c0       	rjmp	.+134    	; 0x300 <Tick+0xa6>
 27a:	21 97       	sbiw	r28, 0x01	; 1
 27c:	41 f0       	breq	.+16     	; 0x28e <Tick+0x34>
 27e:	39 c0       	rjmp	.+114    	; 0x2f2 <Tick+0x98>
 280:	c4 30       	cpi	r28, 0x04	; 4
 282:	d1 05       	cpc	r29, r1
 284:	11 f1       	breq	.+68     	; 0x2ca <Tick+0x70>
 286:	cc f0       	brlt	.+50     	; 0x2ba <Tick+0x60>
 288:	25 97       	sbiw	r28, 0x05	; 5
 28a:	29 f1       	breq	.+74     	; 0x2d6 <Tick+0x7c>
 28c:	32 c0       	rjmp	.+100    	; 0x2f2 <Tick+0x98>
        case init:
            state = wait;
            break;

        case wait:
            if (A0 && !A1) { state = increment; }
 28e:	91 11       	cpse	r25, r1
 290:	06 c0       	rjmp	.+12     	; 0x29e <Tick+0x44>
 292:	88 23       	and	r24, r24
 294:	09 f4       	brne	.+2      	; 0x298 <Tick+0x3e>
 296:	3d c0       	rjmp	.+122    	; 0x312 <Tick+0xb8>
            else if (!A0 && A1) { state = decrement; }
            else if (A0 && A1) { state = reset; }
 298:	c4 e0       	ldi	r28, 0x04	; 4
 29a:	d0 e0       	ldi	r29, 0x00	; 0
 29c:	63 c0       	rjmp	.+198    	; 0x364 <Tick+0x10a>
            state = wait;
            break;

        case wait:
            if (A0 && !A1) { state = increment; }
            else if (!A0 && A1) { state = decrement; }
 29e:	81 11       	cpse	r24, r1
 2a0:	5c c0       	rjmp	.+184    	; 0x35a <Tick+0x100>
 2a2:	2e c0       	rjmp	.+92     	; 0x300 <Tick+0xa6>
            else if (A0 && A1) { state = reset; }
            else { state = wait; }
            break;

        case increment:
            if (A0 && !A1) { state = holdInc; }
 2a4:	91 11       	cpse	r25, r1
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <Tick+0x5a>
 2a8:	88 23       	and	r24, r24
 2aa:	09 f4       	brne	.+2      	; 0x2ae <Tick+0x54>
 2ac:	43 c0       	rjmp	.+134    	; 0x334 <Tick+0xda>
            else if (A0 && A1) { state = reset; }
 2ae:	c4 e0       	ldi	r28, 0x04	; 4
 2b0:	d0 e0       	ldi	r29, 0x00	; 0
 2b2:	58 c0       	rjmp	.+176    	; 0x364 <Tick+0x10a>
            else if (!A0 && !A1) { state = wait; }
 2b4:	88 23       	and	r24, r24
 2b6:	21 f1       	breq	.+72     	; 0x300 <Tick+0xa6>
 2b8:	2c c0       	rjmp	.+88     	; 0x312 <Tick+0xb8>
            break;

        case decrement:
            if (!A0 && A1) { state = holdInc; }
 2ba:	99 23       	and	r25, r25
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <Tick+0x6a>
 2be:	81 11       	cpse	r24, r1
 2c0:	39 c0       	rjmp	.+114    	; 0x334 <Tick+0xda>
 2c2:	1e c0       	rjmp	.+60     	; 0x300 <Tick+0xa6>
            else if (A0 && A1) { state = reset; }
 2c4:	81 11       	cpse	r24, r1
 2c6:	4c c0       	rjmp	.+152    	; 0x360 <Tick+0x106>
 2c8:	4d c0       	rjmp	.+154    	; 0x364 <Tick+0x10a>
            else if (!A0 && !A1) { state = wait;}
            break;

        case reset:
            state = (A0 || A1) ? reset: wait;
 2ca:	99 23       	and	r25, r25
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <Tick+0x76>
 2ce:	4a c0       	rjmp	.+148    	; 0x364 <Tick+0x10a>
 2d0:	81 11       	cpse	r24, r1
 2d2:	48 c0       	rjmp	.+144    	; 0x364 <Tick+0x10a>
 2d4:	15 c0       	rjmp	.+42     	; 0x300 <Tick+0xa6>
            break;

        case holdInc:
            if (timeCntr >= 2) { state = increment; }
 2d6:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <timeCntr.1645>
 2da:	22 30       	cpi	r18, 0x02	; 2
 2dc:	d0 f4       	brcc	.+52     	; 0x312 <Tick+0xb8>
            else if (A0 && !A1) { state = holdInc; }
 2de:	91 11       	cpse	r25, r1
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <Tick+0x92>
 2e2:	88 23       	and	r24, r24
 2e4:	39 f1       	breq	.+78     	; 0x334 <Tick+0xda>
            else if (A0 && A1) {state = reset; }
 2e6:	c4 e0       	ldi	r28, 0x04	; 4
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	3c c0       	rjmp	.+120    	; 0x364 <Tick+0x10a>
            else if (!A0 && !A1) {state = wait; }
 2ec:	88 23       	and	r24, r24
 2ee:	41 f0       	breq	.+16     	; 0x300 <Tick+0xa6>
 2f0:	21 c0       	rjmp	.+66     	; 0x334 <Tick+0xda>

    }

    switch (state) {
        case init:
            count = 0;
 2f2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
            timeCntr = 0;
 2f6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <timeCntr.1645>
            break;
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
 2fe:	32 c0       	rjmp	.+100    	; 0x364 <Tick+0x10a>

        case wait:
            timeCntr = 0;
 300:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <timeCntr.1645>
			LCD_DisplayString(5, "wait");
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	71 e0       	ldi	r23, 0x01	; 1
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	1d df       	rcall	.-454    	; 0x146 <LCD_DisplayString>
            break;
 30c:	c1 e0       	ldi	r28, 0x01	; 1
 30e:	d0 e0       	ldi	r29, 0x00	; 0
 310:	29 c0       	rjmp	.+82     	; 0x364 <Tick+0x10a>

        case increment:
			LCD_DisplayString(5, "inc");
 312:	69 e0       	ldi	r22, 0x09	; 9
 314:	71 e0       	ldi	r23, 0x01	; 1
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	16 df       	rcall	.-468    	; 0x146 <LCD_DisplayString>
            ++count;
 31a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
            ++timeCntr;
 324:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <timeCntr.1645>
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <timeCntr.1645>
            break;
 32e:	c2 e0       	ldi	r28, 0x02	; 2
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	18 c0       	rjmp	.+48     	; 0x364 <Tick+0x10a>
        case reset:

            break;

        case holdInc:
			LCD_DisplayString(5, "hInc");
 334:	6d e0       	ldi	r22, 0x0D	; 13
 336:	71 e0       	ldi	r23, 0x01	; 1
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	05 df       	rcall	.-502    	; 0x146 <LCD_DisplayString>
			++timeCntr;
 33c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <timeCntr.1645>
 340:	8f 5f       	subi	r24, 0xFF	; 255
            if (timeCntr > 2) {
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	28 f4       	brcc	.+10     	; 0x350 <Tick+0xf6>

            break;

        case holdInc:
			LCD_DisplayString(5, "hInc");
			++timeCntr;
 346:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <timeCntr.1645>
 34a:	c5 e0       	ldi	r28, 0x05	; 5
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	0a c0       	rjmp	.+20     	; 0x364 <Tick+0x10a>
            if (timeCntr > 2) {
				timeCntr = 0;
 350:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <timeCntr.1645>
 354:	c5 e0       	ldi	r28, 0x05	; 5
 356:	d0 e0       	ldi	r29, 0x00	; 0
 358:	05 c0       	rjmp	.+10     	; 0x364 <Tick+0x10a>
            state = wait;
            break;

        case wait:
            if (A0 && !A1) { state = increment; }
            else if (!A0 && A1) { state = decrement; }
 35a:	c3 e0       	ldi	r28, 0x03	; 3
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <Tick+0x10a>
            else if (!A0 && !A1) { state = wait; }
            break;

        case decrement:
            if (!A0 && A1) { state = holdInc; }
            else if (A0 && A1) { state = reset; }
 360:	c4 e0       	ldi	r28, 0x04	; 4
        case holdDec:

            break;
    }

	LCD_Cursor(1);
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
    LCD_WriteData(count + '0');
 366:	cf de       	rcall	.-610    	; 0x106 <LCD_Cursor>
 368:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 36c:	80 5d       	subi	r24, 0xD0	; 208
    LCD_Cursor(10);
 36e:	e2 de       	rcall	.-572    	; 0x134 <LCD_WriteData>
 370:	8a e0       	ldi	r24, 0x0A	; 10
    LCD_WriteData(timeCntr + '0');
 372:	c9 de       	rcall	.-622    	; 0x106 <LCD_Cursor>
 374:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <timeCntr.1645>
 378:	80 5d       	subi	r24, 0xD0	; 208
 37a:	dc de       	rcall	.-584    	; 0x134 <LCD_WriteData>


    return state;
}
 37c:	ce 01       	movw	r24, r28
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <main>:

int main(void) {
    /* Insert DDR and PORT initializations */
    DDRA = 0x00; PORTA = 0xFF;
 384:	11 b8       	out	0x01, r1	; 1
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 38a:	87 b9       	out	0x07, r24	; 7
 38c:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 38e:	8a b9       	out	0x0a, r24	; 10
 390:	1b b8       	out	0x0b, r1	; 11
    /* Insert your solution below */

    TimerSet(250);
 392:	6a ef       	ldi	r22, 0xFA	; 250
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	4e df       	rcall	.-356    	; 0x238 <TimerSet>
    TimerOn();
 39c:	ed de       	rcall	.-550    	; 0x178 <TimerOn>
    LCD_init();
 39e:	bb de       	rcall	.-650    	; 0x116 <LCD_init>

    States state = init;
 3a0:	80 e0       	ldi	r24, 0x00	; 0

    while (1) {
        state = Tick(state);
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	5a df       	rcall	.-332    	; 0x25a <Tick>
 3a6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <TimerFlag>
        while (!TimerFlag) {}
 3aa:	99 23       	and	r25, r25
 3ac:	e1 f3       	breq	.-8      	; 0x3a6 <main+0x22>
 3ae:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <TimerFlag>
        TimerFlag = 0;
 3b2:	f7 cf       	rjmp	.-18     	; 0x3a2 <main+0x1e>

000003b4 <_exit>:
    }
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
